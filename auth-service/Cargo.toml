[package]
name = "auth-service"
version = "0.1.0"
edition = "2024"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
axum = "0.8.3"
#Provides extra utilities for axum.
#The cookie feature enables the CookieJar extractor to view and set cookies.
axum-extra = { version = "0.10.1", features = ["cookie"] }
jsonwebtoken = "9.3.1"
chrono = "0.4.40"#time library
dotenvy = "0.15.7"#env
#Enable async
tokio = { version = "1.44.2", features = ["full"] }
#Enable trait that has async fn become compitible to (dyn trait)
async-trait = "0.1.88"
tower-http = { version = "0.6.2", features = ["fs", "cors", "trace"] }
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"
uuid = { version = "1.16.0", features = ["v7", "serde"] }
validator = "0.20.0"
#log = "0.4.27"
env_logger = "0.11.8"
rand = "0.8.5"
sqlx = { version = "0.8", features = ["runtime-tokio-rustls", "postgres", "migrate"] }
#for password hash
argon2 = { version = "0.5.3", features = ["std"] }
password-hash = "0.6.0-rc.0"
redis = { version = "0.25.4", features = ["tokio-comp"] }
#Observability
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.19", features = ["registry", "env-filter"] }
#Error handling
#Crate allows us to easily implement the Error trait on our custom error types.
#Without this crate, we would have to write a fair bit of boilerplate.
#Implementing the Error trait will enable our custom errors to work with other Rust error-handling libraries
#like color_eyre.
thiserror = "2.0.12"
color-eyre = "0.6.4"
tracing-error = "0.2.1"

secrecy = { version = "0.10.3", features = ["serde"] }


[dev-dependencies]
reqwest = { version = "0.12.15", default-features = false, features = ["json", "cookies"] }
fake = "=2.3.0"
quickcheck = "0.9.2"
quickcheck_macros = "0.9.1"